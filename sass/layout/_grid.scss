// variables
@use "../abstracts/variables" as *;

// mixins
@use "../abstracts/mixins" as *;

// functions
@use "../abstracts/functions" as *;

.row {
  max-width: grid(width);
  margin: 0 auto;

  // margin except for the last row
  &:not(:last-child) {
    margin-bottom: grid(gutter-vertical);

    @include respondDeviceWidth(tab-port) {
      margin-bottom: grid(gutter-vertical-small);
    }
  }

  // reduce the max width of a row on smaller devices
  @include respondDeviceWidth(tab-port) {
    max-width: 50rem;
  }

  // clearfix to clear the floats
  @include clearfix;

  // every class attribute with a value that starts with col-
  [class^="col-"] {
    float: left;

    // margin except for the last one
    &:not(:last-child) {
      margin-right: grid(gutter-horizontal);

      // Margin right is 0 below tablet portrait
      @include respondDeviceWidth(tab-port) {
        margin-right: 0;
        margin-bottom: grid(gutter-vertical-small);
      }
    }

    // everything is just one column on portrait and lower
    @include respondDeviceWidth(tab-port) {
      width: 100% !important;
    }
  }

  .col-1-of-2 {
    width: calc((100% - grid(gutter-horizontal)) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - 2 * grid(gutter-horizontal)) / 3);
  }

  .col-2-of-3 {
    width: calc(
      2 * ((100% - 2 * grid(gutter-horizontal)) / 3) + grid(gutter-horizontal)
    );
  }

  .col-1-of-4 {
    width: calc((100% - 3 * grid(gutter-horizontal)) / 4);
  }

  .col-2-of-4 {
    width: calc((100% - grid(gutter-horizontal)) / 2);
  }

  .col-3-of-4 {
    width: calc(
      3 * ((100% - 3 * grid(gutter-horizontal)) / 4) + 2 *
        grid(gutter-horizontal)
    );
  }
}
